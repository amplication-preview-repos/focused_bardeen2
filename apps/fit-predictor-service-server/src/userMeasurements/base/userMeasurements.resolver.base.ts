/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserMeasurements } from "./UserMeasurements";
import { UserMeasurementsCountArgs } from "./UserMeasurementsCountArgs";
import { UserMeasurementsFindManyArgs } from "./UserMeasurementsFindManyArgs";
import { UserMeasurementsFindUniqueArgs } from "./UserMeasurementsFindUniqueArgs";
import { CreateUserMeasurementsArgs } from "./CreateUserMeasurementsArgs";
import { UpdateUserMeasurementsArgs } from "./UpdateUserMeasurementsArgs";
import { DeleteUserMeasurementsArgs } from "./DeleteUserMeasurementsArgs";
import { FitPredictionFindManyArgs } from "../../fitPrediction/base/FitPredictionFindManyArgs";
import { FitPrediction } from "../../fitPrediction/base/FitPrediction";
import { UserMeasurementsService } from "../userMeasurements.service";
@graphql.Resolver(() => UserMeasurements)
export class UserMeasurementsResolverBase {
  constructor(protected readonly service: UserMeasurementsService) {}

  async _userMeasurementsItemsMeta(
    @graphql.Args() args: UserMeasurementsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserMeasurements])
  async userMeasurementsItems(
    @graphql.Args() args: UserMeasurementsFindManyArgs
  ): Promise<UserMeasurements[]> {
    return this.service.userMeasurementsItems(args);
  }

  @graphql.Query(() => UserMeasurements, { nullable: true })
  async userMeasurements(
    @graphql.Args() args: UserMeasurementsFindUniqueArgs
  ): Promise<UserMeasurements | null> {
    const result = await this.service.userMeasurements(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserMeasurements)
  async createUserMeasurements(
    @graphql.Args() args: CreateUserMeasurementsArgs
  ): Promise<UserMeasurements> {
    return await this.service.createUserMeasurements({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserMeasurements)
  async updateUserMeasurements(
    @graphql.Args() args: UpdateUserMeasurementsArgs
  ): Promise<UserMeasurements | null> {
    try {
      return await this.service.updateUserMeasurements({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserMeasurements)
  async deleteUserMeasurements(
    @graphql.Args() args: DeleteUserMeasurementsArgs
  ): Promise<UserMeasurements | null> {
    try {
      return await this.service.deleteUserMeasurements(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FitPrediction], { name: "fitPredictions" })
  async findFitPredictions(
    @graphql.Parent() parent: UserMeasurements,
    @graphql.Args() args: FitPredictionFindManyArgs
  ): Promise<FitPrediction[]> {
    const results = await this.service.findFitPredictions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
