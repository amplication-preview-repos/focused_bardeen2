/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FitPrediction } from "./FitPrediction";
import { FitPredictionCountArgs } from "./FitPredictionCountArgs";
import { FitPredictionFindManyArgs } from "./FitPredictionFindManyArgs";
import { FitPredictionFindUniqueArgs } from "./FitPredictionFindUniqueArgs";
import { CreateFitPredictionArgs } from "./CreateFitPredictionArgs";
import { UpdateFitPredictionArgs } from "./UpdateFitPredictionArgs";
import { DeleteFitPredictionArgs } from "./DeleteFitPredictionArgs";
import { Garment } from "../../garment/base/Garment";
import { UserMeasurements } from "../../userMeasurements/base/UserMeasurements";
import { FitPredictionService } from "../fitPrediction.service";
@graphql.Resolver(() => FitPrediction)
export class FitPredictionResolverBase {
  constructor(protected readonly service: FitPredictionService) {}

  async _fitPredictionsMeta(
    @graphql.Args() args: FitPredictionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FitPrediction])
  async fitPredictions(
    @graphql.Args() args: FitPredictionFindManyArgs
  ): Promise<FitPrediction[]> {
    return this.service.fitPredictions(args);
  }

  @graphql.Query(() => FitPrediction, { nullable: true })
  async fitPrediction(
    @graphql.Args() args: FitPredictionFindUniqueArgs
  ): Promise<FitPrediction | null> {
    const result = await this.service.fitPrediction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FitPrediction)
  async createFitPrediction(
    @graphql.Args() args: CreateFitPredictionArgs
  ): Promise<FitPrediction> {
    return await this.service.createFitPrediction({
      ...args,
      data: {
        ...args.data,

        garment: args.data.garment
          ? {
              connect: args.data.garment,
            }
          : undefined,

        userMeasurement: args.data.userMeasurement
          ? {
              connect: args.data.userMeasurement,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FitPrediction)
  async updateFitPrediction(
    @graphql.Args() args: UpdateFitPredictionArgs
  ): Promise<FitPrediction | null> {
    try {
      return await this.service.updateFitPrediction({
        ...args,
        data: {
          ...args.data,

          garment: args.data.garment
            ? {
                connect: args.data.garment,
              }
            : undefined,

          userMeasurement: args.data.userMeasurement
            ? {
                connect: args.data.userMeasurement,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FitPrediction)
  async deleteFitPrediction(
    @graphql.Args() args: DeleteFitPredictionArgs
  ): Promise<FitPrediction | null> {
    try {
      return await this.service.deleteFitPrediction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Garment, {
    nullable: true,
    name: "garment",
  })
  async getGarment(
    @graphql.Parent() parent: FitPrediction
  ): Promise<Garment | null> {
    const result = await this.service.getGarment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserMeasurements, {
    nullable: true,
    name: "userMeasurement",
  })
  async getUserMeasurement(
    @graphql.Parent() parent: FitPrediction
  ): Promise<UserMeasurements | null> {
    const result = await this.service.getUserMeasurement(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
