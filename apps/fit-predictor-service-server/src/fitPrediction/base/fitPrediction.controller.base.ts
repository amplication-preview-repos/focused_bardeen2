/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FitPredictionService } from "../fitPrediction.service";
import { FitPredictionCreateInput } from "./FitPredictionCreateInput";
import { FitPrediction } from "./FitPrediction";
import { FitPredictionFindManyArgs } from "./FitPredictionFindManyArgs";
import { FitPredictionWhereUniqueInput } from "./FitPredictionWhereUniqueInput";
import { FitPredictionUpdateInput } from "./FitPredictionUpdateInput";

export class FitPredictionControllerBase {
  constructor(protected readonly service: FitPredictionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FitPrediction })
  async createFitPrediction(
    @common.Body() data: FitPredictionCreateInput
  ): Promise<FitPrediction> {
    return await this.service.createFitPrediction({
      data: {
        ...data,

        garment: data.garment
          ? {
              connect: data.garment,
            }
          : undefined,

        userMeasurement: data.userMeasurement
          ? {
              connect: data.userMeasurement,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        fitRating: true,
        fitScore: true,

        garment: {
          select: {
            id: true,
          },
        },

        id: true,
        recommendation: true,
        updatedAt: true,

        userMeasurement: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FitPrediction] })
  @ApiNestedQuery(FitPredictionFindManyArgs)
  async fitPredictions(
    @common.Req() request: Request
  ): Promise<FitPrediction[]> {
    const args = plainToClass(FitPredictionFindManyArgs, request.query);
    return this.service.fitPredictions({
      ...args,
      select: {
        createdAt: true,
        fitRating: true,
        fitScore: true,

        garment: {
          select: {
            id: true,
          },
        },

        id: true,
        recommendation: true,
        updatedAt: true,

        userMeasurement: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FitPrediction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fitPrediction(
    @common.Param() params: FitPredictionWhereUniqueInput
  ): Promise<FitPrediction | null> {
    const result = await this.service.fitPrediction({
      where: params,
      select: {
        createdAt: true,
        fitRating: true,
        fitScore: true,

        garment: {
          select: {
            id: true,
          },
        },

        id: true,
        recommendation: true,
        updatedAt: true,

        userMeasurement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FitPrediction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFitPrediction(
    @common.Param() params: FitPredictionWhereUniqueInput,
    @common.Body() data: FitPredictionUpdateInput
  ): Promise<FitPrediction | null> {
    try {
      return await this.service.updateFitPrediction({
        where: params,
        data: {
          ...data,

          garment: data.garment
            ? {
                connect: data.garment,
              }
            : undefined,

          userMeasurement: data.userMeasurement
            ? {
                connect: data.userMeasurement,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          fitRating: true,
          fitScore: true,

          garment: {
            select: {
              id: true,
            },
          },

          id: true,
          recommendation: true,
          updatedAt: true,

          userMeasurement: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FitPrediction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFitPrediction(
    @common.Param() params: FitPredictionWhereUniqueInput
  ): Promise<FitPrediction | null> {
    try {
      return await this.service.deleteFitPrediction({
        where: params,
        select: {
          createdAt: true,
          fitRating: true,
          fitScore: true,

          garment: {
            select: {
              id: true,
            },
          },

          id: true,
          recommendation: true,
          updatedAt: true,

          userMeasurement: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
