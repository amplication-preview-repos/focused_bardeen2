/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Garment as PrismaGarment,
  FitPrediction as PrismaFitPrediction,
} from "@prisma/client";

export class GarmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GarmentCountArgs, "select">): Promise<number> {
    return this.prisma.garment.count(args);
  }

  async garments(args: Prisma.GarmentFindManyArgs): Promise<PrismaGarment[]> {
    return this.prisma.garment.findMany(args);
  }
  async garment(
    args: Prisma.GarmentFindUniqueArgs
  ): Promise<PrismaGarment | null> {
    return this.prisma.garment.findUnique(args);
  }
  async createGarment(args: Prisma.GarmentCreateArgs): Promise<PrismaGarment> {
    return this.prisma.garment.create(args);
  }
  async updateGarment(args: Prisma.GarmentUpdateArgs): Promise<PrismaGarment> {
    return this.prisma.garment.update(args);
  }
  async deleteGarment(args: Prisma.GarmentDeleteArgs): Promise<PrismaGarment> {
    return this.prisma.garment.delete(args);
  }

  async findFitPredictions(
    parentId: string,
    args: Prisma.FitPredictionFindManyArgs
  ): Promise<PrismaFitPrediction[]> {
    return this.prisma.garment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fitPredictions(args);
  }
}
