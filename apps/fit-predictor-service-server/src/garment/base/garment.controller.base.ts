/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GarmentService } from "../garment.service";
import { GarmentCreateInput } from "./GarmentCreateInput";
import { Garment } from "./Garment";
import { GarmentFindManyArgs } from "./GarmentFindManyArgs";
import { GarmentWhereUniqueInput } from "./GarmentWhereUniqueInput";
import { GarmentUpdateInput } from "./GarmentUpdateInput";
import { FitPredictionFindManyArgs } from "../../fitPrediction/base/FitPredictionFindManyArgs";
import { FitPrediction } from "../../fitPrediction/base/FitPrediction";
import { FitPredictionWhereUniqueInput } from "../../fitPrediction/base/FitPredictionWhereUniqueInput";

export class GarmentControllerBase {
  constructor(protected readonly service: GarmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Garment })
  async createGarment(
    @common.Body() data: GarmentCreateInput
  ): Promise<Garment> {
    return await this.service.createGarment({
      data: data,
      select: {
        brand: true,
        category: true,
        createdAt: true,
        elasticity: true,
        fabricType: true,
        fitType: true,
        id: true,
        length: true,
        productId: true,
        shoulder: true,
        size: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Garment] })
  @ApiNestedQuery(GarmentFindManyArgs)
  async garments(@common.Req() request: Request): Promise<Garment[]> {
    const args = plainToClass(GarmentFindManyArgs, request.query);
    return this.service.garments({
      ...args,
      select: {
        brand: true,
        category: true,
        createdAt: true,
        elasticity: true,
        fabricType: true,
        fitType: true,
        id: true,
        length: true,
        productId: true,
        shoulder: true,
        size: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Garment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async garment(
    @common.Param() params: GarmentWhereUniqueInput
  ): Promise<Garment | null> {
    const result = await this.service.garment({
      where: params,
      select: {
        brand: true,
        category: true,
        createdAt: true,
        elasticity: true,
        fabricType: true,
        fitType: true,
        id: true,
        length: true,
        productId: true,
        shoulder: true,
        size: true,
        updatedAt: true,
        width: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Garment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGarment(
    @common.Param() params: GarmentWhereUniqueInput,
    @common.Body() data: GarmentUpdateInput
  ): Promise<Garment | null> {
    try {
      return await this.service.updateGarment({
        where: params,
        data: data,
        select: {
          brand: true,
          category: true,
          createdAt: true,
          elasticity: true,
          fabricType: true,
          fitType: true,
          id: true,
          length: true,
          productId: true,
          shoulder: true,
          size: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Garment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGarment(
    @common.Param() params: GarmentWhereUniqueInput
  ): Promise<Garment | null> {
    try {
      return await this.service.deleteGarment({
        where: params,
        select: {
          brand: true,
          category: true,
          createdAt: true,
          elasticity: true,
          fabricType: true,
          fitType: true,
          id: true,
          length: true,
          productId: true,
          shoulder: true,
          size: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/fitPredictions")
  @ApiNestedQuery(FitPredictionFindManyArgs)
  async findFitPredictions(
    @common.Req() request: Request,
    @common.Param() params: GarmentWhereUniqueInput
  ): Promise<FitPrediction[]> {
    const query = plainToClass(FitPredictionFindManyArgs, request.query);
    const results = await this.service.findFitPredictions(params.id, {
      ...query,
      select: {
        createdAt: true,
        fitRating: true,
        fitScore: true,

        garment: {
          select: {
            id: true,
          },
        },

        id: true,
        recommendation: true,
        updatedAt: true,

        userMeasurement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fitPredictions")
  async connectFitPredictions(
    @common.Param() params: GarmentWhereUniqueInput,
    @common.Body() body: FitPredictionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fitPredictions: {
        connect: body,
      },
    };
    await this.service.updateGarment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fitPredictions")
  async updateFitPredictions(
    @common.Param() params: GarmentWhereUniqueInput,
    @common.Body() body: FitPredictionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fitPredictions: {
        set: body,
      },
    };
    await this.service.updateGarment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fitPredictions")
  async disconnectFitPredictions(
    @common.Param() params: GarmentWhereUniqueInput,
    @common.Body() body: FitPredictionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fitPredictions: {
        disconnect: body,
      },
    };
    await this.service.updateGarment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
