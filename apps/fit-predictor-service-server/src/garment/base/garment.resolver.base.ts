/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Garment } from "./Garment";
import { GarmentCountArgs } from "./GarmentCountArgs";
import { GarmentFindManyArgs } from "./GarmentFindManyArgs";
import { GarmentFindUniqueArgs } from "./GarmentFindUniqueArgs";
import { CreateGarmentArgs } from "./CreateGarmentArgs";
import { UpdateGarmentArgs } from "./UpdateGarmentArgs";
import { DeleteGarmentArgs } from "./DeleteGarmentArgs";
import { FitPredictionFindManyArgs } from "../../fitPrediction/base/FitPredictionFindManyArgs";
import { FitPrediction } from "../../fitPrediction/base/FitPrediction";
import { GarmentService } from "../garment.service";
@graphql.Resolver(() => Garment)
export class GarmentResolverBase {
  constructor(protected readonly service: GarmentService) {}

  async _garmentsMeta(
    @graphql.Args() args: GarmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Garment])
  async garments(
    @graphql.Args() args: GarmentFindManyArgs
  ): Promise<Garment[]> {
    return this.service.garments(args);
  }

  @graphql.Query(() => Garment, { nullable: true })
  async garment(
    @graphql.Args() args: GarmentFindUniqueArgs
  ): Promise<Garment | null> {
    const result = await this.service.garment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Garment)
  async createGarment(
    @graphql.Args() args: CreateGarmentArgs
  ): Promise<Garment> {
    return await this.service.createGarment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Garment)
  async updateGarment(
    @graphql.Args() args: UpdateGarmentArgs
  ): Promise<Garment | null> {
    try {
      return await this.service.updateGarment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Garment)
  async deleteGarment(
    @graphql.Args() args: DeleteGarmentArgs
  ): Promise<Garment | null> {
    try {
      return await this.service.deleteGarment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FitPrediction], { name: "fitPredictions" })
  async findFitPredictions(
    @graphql.Parent() parent: Garment,
    @graphql.Args() args: FitPredictionFindManyArgs
  ): Promise<FitPrediction[]> {
    const results = await this.service.findFitPredictions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
